@page "/Products/{ProductName?}"

@using BazyDanych.Data.Entities
@using BazyDanych.Repositories

<RequireLoggedIn/>

<h3>Products</h3>

<Button @onclick="OnCreateProduct" Color="ButtonColor.Primary">Add product</Button>

@if (_products is null)
{
    <p>
        <em>Loading products...</em>
    </p>
}
else
{
    <table class="table products-table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Category</th>
            <th>Price</th>
            <th>Unit</th>
            <th>Available quantity</th>
            <th>Popularity</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var product in _products)
        {
            <tr>
                <td>@product.Name</td>
                <td>@product.Category</td>
                <td>@product.Price</td>
                <td>@product.Unit</td>
                <td>@product.AvailableQuantity</td>
                <td>@product.Popularity</td>
            </tr>
        }
        </tbody>
    </table>
}

@inject ProductRepository Repository

@code {

    [Parameter] public string? ProductName { get; set; }

    private IEnumerable<Product>? _products;

    protected override async Task OnInitializedAsync()
    {
        _products = await GetProducts();
    }

    private async Task<IEnumerable<Product>> GetProducts()
    {
        return ProductName is not { } name
            ? await Repository.GetProductsAsync()
            : await Repository.GetProductsByNameAsync(name);
    }

    private async Task OnCreateProduct()
    {
        var product = new Product
        {
            Price = 13.99M,
            Category = "Oro",
            AvailableQuantity = 124,
            Name = "Deadass oro",
            Popularity = 1,
            Unit = "KiloTona"
        };

        await Repository.CreateProductAsync(product);
    }

}