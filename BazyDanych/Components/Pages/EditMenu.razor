@page "/EditMenu"
@using BazyDanych.Components.Modals
@using BazyDanych.Data.Entities
@using BazyDanych.Data.Models
@using BazyDanych.Repositories
@using BazyDanych.Services

<RequireLoggedIn RequiredPermissions="[PermissionsModel.Manager]"/>

<PageTitle>Edycja menu</PageTitle>

<Modal @ref="_modal"/>

<h3>Edycja menu</h3>

@if (_products is null)
{
    <p>
        <em>Ładowanie produktów...</em>
    </p>
}
else
{
    <div class="d-flex" style="gap: 10px">
        <Button Color="ButtonColor.Primary" @onclick="GoBack">Powrót</Button>
        <Button Color="ButtonColor.Success" @onclick="AddProduct">Dodaj produkt</Button>
    </div>

    <div class="container">
        <table class="table products-table">
            <thead>
            <tr>
                <th>Nazwa</th>
                <th>Kategoria</th>
                <th>Cena</th>
                <th>Jednostka</th>
                <th>Dostępna ilość</th>
                <th>Popularność</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var product in _products)
            {
                <tr @onclick="() => EditProduct(product)">
                    <td>@product.Name</td>
                    <td>@product.Category</td>
                    <td>@product.Price</td>
                    <td>@product.Unit</td>
                    <td>@product.AvailableQuantity</td>
                    <td>@product.Popularity</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@inject ProductRepository ProductRepository
@inject RedirectManager RedirectManager
@inject UserService UserService

@code {
    private Modal _modal = default!;
    private Dictionary<string, object> _editModalParameters = default!;
    private Dictionary<string, object> _createModalParameters = default!;

    private IEnumerable<Product>? _products;
    
    private Task CloseModal() => _modal.HideAsync();

    protected override async Task OnInitializedAsync()
    {
        _editModalParameters = new Dictionary<string, object>
        {
            { nameof(EditProductModal.CancelCallback), EventCallback.Factory.Create(this, CloseModal) },
            { nameof(EditProductModal.ModifyProductCallback), EventCallback.Factory.Create<Product>(this, ProductModified) }
        };
        
        _createModalParameters = new Dictionary<string, object>
        {
            { nameof(AddProductModal.CancelCallback), EventCallback.Factory.Create(this, CloseModal) },
            { nameof(AddProductModal.CreateProductCallback), EventCallback.Factory.Create<Product>(this, ProductAdded) }
        };

        _products = await ProductRepository.GetProductsAsync(UserService.EmployeePermissions);
    }

    private Task EditProduct(Product product)
    {
        _editModalParameters[nameof(EditProductModal.ModifiedProduct)] = product;
        return _modal.ShowAsync<EditProductModal>("Modyfikuj produkt", parameters: _editModalParameters);
    }

    private async Task ProductModified(Product product)
    {
        await _modal.HideAsync();
        await ProductRepository.ModifyProductAsync(product, UserService.EmployeePermissions);

        var modifiedProduct = _products?.FirstOrDefault(x => x.Id == product.Id);
        if (modifiedProduct is null) return;

        modifiedProduct.Price = product.Price;
        modifiedProduct.Name = product.Name;
        modifiedProduct.Unit = product.Unit;
        modifiedProduct.Category = product.Category;
    }

    private Task AddProduct()
    {
        return _modal.ShowAsync<AddProductModal>("Dodaj nowy produkt", parameters: _createModalParameters);
    }

    private async Task ProductAdded(Product productToAdd)
    {
        await _modal.HideAsync();
        var productId = await ProductRepository.CreateProductAsync(productToAdd, UserService.EmployeePermissions);
        productToAdd.Id = productId;
        
        _products = _products?.Concat([productToAdd]);
    }

    private void GoBack() => RedirectManager.RedirectTo("/");

}