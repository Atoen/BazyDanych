@page "/Employees"
@using BazyDanych.Components.Modals
@using BazyDanych.Data.Models
@using BazyDanych.Repositories
@using BazyDanych.Services

<RequireLoggedIn RequiredPermissions="[PermissionsModel.Manager]"/>

<PageTitle>Zarządzanie pracownikami</PageTitle>

<Modal @ref="_modal"/>

<h3>Zarządzanie pracownikami</h3>

@if (_employees is null)
{
<p>
    <em>Ładowanie pracowników...</em>
</p>
}
else
{
    <div class="d-flex" style="gap: 10px">
        <Button Color="ButtonColor.Primary" @onclick="GoBack">Powrót</Button>
        <Button Color="ButtonColor.Success" @onclick="AddEmployee">Dodaj pracownika</Button>
    </div>
    
    <div class="container">
        <table class="table employees-table">
            <thead>
            <tr>
                <th>Imię</th>
                <th>Drugie imię</th>
                <th>Nazwisko</th>
                <th>Login</th>
                <th>Płaca</th>
                <th>Stanowisko</th>
                <th>Uprawnienia</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var employee in _employees)
            {
                <tr @onclick="() => EditEmployee(employee)">
                    <td>@employee.FirstName</td>
                    <td>@(employee.SecondName ?? "-")</td>
                    <td>@employee.LastName</td>
                    <td>@employee.Login</td>
                    <td>@employee.Position.Salary</td>
                    <td>@employee.Position.Name</td>
                    <td>@employee.Position.Permissions</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@inject RedirectManager RedirectManager
@inject EmployeeRepository EmployeeRepository
@inject UserService UserService

@code {
    private Modal _modal = default!;
    private Dictionary<string, object> _editModalParameters = default!;
    private Dictionary<string, object> _createModalParameters = default!;
    
    private IEnumerable<EmployeeModel>? _employees;
    
    private Task CloseModal() => _modal.HideAsync();

    protected override async Task OnInitializedAsync()
    {
        _editModalParameters = new Dictionary<string, object>
        {
            { nameof(EditEmployeeModal.CancelCallback), EventCallback.Factory.Create(this, CloseModal) },
            { nameof(EditEmployeeModal.ModifyEmployeeCallback), EventCallback.Factory.Create<EmployeeModel>(this, EmployeeModified) }
        };

        _createModalParameters = new Dictionary<string, object>
        {
            { nameof(AddEmployeeModal.CancelCallback), EventCallback.Factory.Create(this, CloseModal) },
            { nameof(AddEmployeeModal.AddEmployeeCallback), EventCallback.Factory.Create<EmployeeModel>(this, EmployeeAdded) }
        };
        
        _employees = await EmployeeRepository.GetAllEmployeeModelsAsync(UserService.EmployeePermissions);
    }

    private Task EditEmployee(EmployeeModel employee)
    {
        _editModalParameters[nameof(EditEmployeeModal.ModifiedEmployee)] = employee;
        return _modal.ShowAsync<EditEmployeeModal>("Modyfikuj dane pracownika", parameters: _editModalParameters);
    }

    private async Task EmployeeModified(EmployeeModel employee)
    {
        await _modal.HideAsync();
        await EmployeeRepository.ModifyEmployeeAsync(employee, UserService.EmployeePermissions);
        
        var modifiedEmployee = _employees?.FirstOrDefault(x => x.Id == employee.Id);
        if (modifiedEmployee is null) return;

        modifiedEmployee.Login = employee.Login;
        modifiedEmployee.FirstName = employee.FirstName;
        modifiedEmployee.SecondName = employee.SecondName;
        modifiedEmployee.LastName = employee.LastName;
        modifiedEmployee.Position = employee.Position;
    }

    private Task AddEmployee()
    {
        return _modal.ShowAsync<AddEmployeeModal>("Dodaj nowego pracownika", parameters: _createModalParameters);
    }

    private async Task EmployeeAdded(EmployeeModel employee)
    {
        await _modal.HideAsync();
        var employeeId = await EmployeeRepository.AddEmployeeAsync(employee, UserService.EmployeePermissions);
        employee.Id = employeeId;
        
        _employees = _employees?.Concat([employee]);
    }

    private void GoBack() => RedirectManager.RedirectTo("/");
}