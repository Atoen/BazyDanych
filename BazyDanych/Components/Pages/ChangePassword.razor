@page "/Account/ChangePassword"
@using System.ComponentModel.DataAnnotations
@using BazyDanych.Data.Models
@using BazyDanych.Repositories
@using BazyDanych.Services

<h3>Zmiana hasła</h3>

<RequireLoggedIn />

<StatusMessage Data="@_statusMessageData" />

<EditForm Model="_passwordModel" OnValidSubmit="ChangePasswordAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Stare hasło:</label>
        <InputText @bind-Value="_passwordModel.OldPassword" type="password" />
    </div>
    <div class="form-group">
        <label>Nowe hasło:</label>
        <InputText @bind-Value="_passwordModel.NewPassword" type="password" />
    </div>
    <div class="form-group">
        <label>Potwierdź nowe hasło:</label>
        <InputText @bind-Value="_passwordModel.ConfirmNewPassword" type="password" />
    </div>
    <div class="form-group">
        <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="GoBack">Powrót</Button>
        <Button Type="ButtonType.Submit" Color="ButtonColor.Danger">Zmień hasło</Button>
    </div>
</EditForm>

@inject EmployeeRepository EmployeeRepository
@inject UserService UserService
@inject RedirectManager RedirectManager

@code {
    
    private readonly PasswordModel _passwordModel = new();
    private StatusMessageData? _statusMessageData;

    private async Task ChangePasswordAsync()
    {
        if (_passwordModel.NewPassword != _passwordModel.ConfirmNewPassword)
        {
            _statusMessageData = new StatusMessageData("Nowe hasło i jego potwierdzenie nie są takie same.", StatusMessageType.Error);
            return;
        }

        if (_passwordModel.NewPassword == _passwordModel.OldPassword)
        {
            _statusMessageData = new StatusMessageData("Nowe hasło musi być inne od obecnego.", StatusMessageType.Error);
            return;
        }

        var employee = UserService.Employee;
        if (employee == null)
        {
            _statusMessageData = new StatusMessageData("Nie można znaleźć zalogowanego użytkownika.", StatusMessageType.Error);
            return;
        }

        try
        {
            await EmployeeRepository.ChangePasswordAsync(employee.Id, _passwordModel.OldPassword, _passwordModel
                .NewPassword, UserService.EmployeePermissions);
            _statusMessageData = new StatusMessageData("Pomyślnie zmieniono hasło", StatusMessageType.Info);
        }
        catch (Exception e)
        {
            _statusMessageData = new StatusMessageData($"Błąd zmiany hasła: {e.Message}", StatusMessageType.Error);
        }
    }

    private class PasswordModel
    {
        public string OldPassword { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Nowe hasło jest wymagane")]
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmNewPassword { get; set; } = string.Empty;
    }

    private void GoBack() => RedirectManager.RedirectTo("/Account");
}
