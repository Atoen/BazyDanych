@page "/Warehouse/PlaceOrder"
@using System.Collections.Immutable
@using BazyDanych.Data.Entities
@using BazyDanych.Data.Models
@using BazyDanych.Repositories
@using BazyDanych.Services

<RequireLoggedIn RequiredPermissions="[PermissionsModel.Manager, PermissionsModel.Warehouseman]"/>

<PageTitle>Złóż zamówienie do magazynu</PageTitle>

<ConfirmDialog @ref="_dialog"/>

<h3>Złóż zamówienie do magazynu</h3>

<div class="d-flex" style="gap: 10px">
    <Button Color="ButtonColor.Primary" @onclick="GoBack">Powrót</Button>
</div>

<div class="row my-3">
    <div class="col-md-5">
        <label class="form-label">Produkt</label>
        <AutoComplete @bind-Value="_selectedProductName"
                      TItem="Product"
                      DataProvider="ProductDataProvider"
                      Placeholder="Wyszukaj produkt"
                      PropertyName="Name"
                      LoadingText="Ładowanie..."
                      EmptyText="Nie znaleziono produktów."
                      OnChanged="OnAutoCompleteChanged">
        </AutoComplete>
    </div>
    <div class="col-md-2">
        <label class="form-label">Liczba</label>
        <NumberInput TValue="int" @bind-Value="@_amount" Placeholder="Podaj ilość w zamówieniu"
                     AllowNegativeNumbers="false" Min="0" EnableMinMax="true" Max="int.MaxValue"/>
    </div>
    <div class="col-md-2">
        <label class="form-label">Cena</label>
        <CurrencyInput id="orderPrice" TValue="decimal" @bind-Value="_price" AllowNegativeNumbers="false"
                       MinimumIntegerDigits="1" MinimumFractionDigits="2" MaximumFractionDigits="2"
                       Placeholder="Wprowadź nowe wynagrodzenie pracownika" Locale="pl-pl" class="form-control"/>
    </div>
    <div class="col-md-2 pe-none">
        <label class="form-label">Cena sumaryczna</label>
        <CurrencyInput id="totalPrice" TValue="decimal" @bind-Value="_totalPrice" Locale="pl-pl" class="form-control"
                       readonly="true"/>
    </div>
</div>

<div class="d-flex my-3" style="gap: 10px">
    <Button Color="ButtonColor.Success" @onclick="AddOrder">Dodaj produkty</Button>
    <Button Color="ButtonColor.Warning" @onclick="PlaceOrder">Złóż zamówienie</Button>
</div>

<StatusMessage Data="_statusMessageData"/>

<div class="container">

    <table class="table products-table">
        <thead>
        <tr>
            <th/>
            <th>Produkt</th>
            <th>Ilość zamówiona</th>
            <th>Cena za pakiet</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var order in _orders)
        {
            <tr>
                <td @onclick="() => DeleteOrder(order)" @onclick:stopPropagation="true">
                    <Icon Name="IconName.Trash" Color="IconColor.Danger" Size="IconSize.x5"/>
                </td>
                <td>@order.Product.Name</td>
                <td>@order.Amount</td>
                <td>@order.Price</td>
            </tr>
        }
        </tbody>
    </table>
</div>

@inject RedirectManager RedirectManager
@inject ProductRepository ProductRepository
@inject WarehouseOrderRepository WarehouseOrderRepository
@inject UserService UserService

@code {

    [SupplyParameterFromQuery] public bool? FromMenu { get; set; }

    private string? _selectedProductName;
    private Product? _selectedProduct;
    private int _amount;
    private decimal _price;

    private decimal _totalPrice;
    private StatusMessageData? _statusMessageData;

    private ConfirmDialog _dialog = default!;

    private readonly ConfirmDialogOptions _dialogOptions = new()
    {
        YesButtonText = "Tak",
        YesButtonColor = ButtonColor.Success,
        NoButtonText = "Anuluj",
        NoButtonColor = ButtonColor.Danger,
        AutoFocusYesButton = false
    };

    private readonly List<WarehouseOrderPart> _orders = [];
    private IEnumerable<Product>? _cachedProducts;

    private void GoBack() => RedirectManager.RedirectTo(FromMenu is true ? "/" : "/Warehouse");

    private async Task<AutoCompleteDataProviderResult<Product>> ProductDataProvider(AutoCompleteDataProviderRequest<Product> request)
    {
        _cachedProducts ??= await ProductRepository.GetProductsAsync();

        return request.ApplyTo(_cachedProducts.OrderBy(x => x.Name));
    }

    private void AddOrder()
    {
        _statusMessageData = null;

        if (_selectedProduct is null || _amount <= 0 || _price <= 0)
        {
            _statusMessageData = new StatusMessageData("Niepoprawne dane zamówienia", StatusMessageType.Error);
            return;
        }

        _orders.Add(new WarehouseOrderPart(_selectedProduct, _amount, _price));
        _totalPrice = _orders.Sum(x => x.Price);
    }

    private void DeleteOrder(WarehouseOrderPart order)
    {
        _orders.Remove(order);
    }

    private void OnAutoCompleteChanged(Product? product)
    {
        _selectedProduct = product;

        Console.WriteLine($"'{product?.Name}' selected.");
    }

    private void ClearData()
    {
        _selectedProduct = null;
        _selectedProductName = null;
        _totalPrice = 0;
        _price = 0;
        _amount = 0;
        _orders.Clear();
    }

    private async Task PlaceOrder()
    {
        if (_orders.Count == 0) return;

        var productCount = _orders.Sum(x => x.Amount);
        var confirmation = await _dialog.ShowAsync(
            title: "Złóż zamówienie",
            message1: $"Czy zamówienie za {_totalPrice} zł składające się z {productCount} produktów jest poprawne?",
            confirmDialogOptions: _dialogOptions);

        if (!confirmation) return;

        if (UserService.Employee is not { Id: var orderingEmployeeId })
        {
            RedirectManager.RedirectToLogin();
            return;
        }

        var warehouseOrder = new WarehouseOrderModel(
            DateTime.Now, orderingEmployeeId, _totalPrice, _orders.ToImmutableList());
        await WarehouseOrderRepository.AddWarehouseOrderAsync(warehouseOrder);

        ClearData();
    }
}