@using BazyDanych.Data.Entities
@using BazyDanych.Data.Models

<StatusMessage Data="_statusMessageData"/>

<div class="row mb-3 align-items-end">
    <div class="col-md-2">
        <label for="productName" class="form-label">Nazwa</label>
    </div>
    <div class="col-md-10">
        <InputText id="productName" @bind-Value="_newName" Placeholder="Wprowadź nazwę produktu" class="form-control" />
    </div>
</div>

<div class="row mb-3 align-items-end">
    <div class="col-md-2">
        <label for="productCategory" class="form-label">Kategoria</label>
    </div>
    <div class="col-md-10">
        <InputText id="productCategory" @bind-Value="_newCategory" Placeholder="Wprowadź kategorię produktu" class="form-control" />
    </div>
</div>

<div class="row mb-3 align-items-end">
    <div class="col-md-2">
        <label for="productUnit" class="form-label">Jednostka</label>
    </div>
    <div class="col-md-10">
        <InputText id="productUnit" @bind-Value="_newUnit" Placeholder="Wprowadź jednostkę produktu" class="form-control" />
    </div>
</div>

<div class="row mb-3 align-items-end">
    <div class="col-md-2">
        <label for="productPrice" class="form-label">Cena</label>
    </div>
    <div class="col-md-10">
        <CurrencyInput id="productPrice" TValue="decimal" @bind-Value="_newPrice" AllowNegativeNumbers="false"
                       MinimumIntegerDigits="1" MinimumFractionDigits="2" MaximumFractionDigits="2"
                       Placeholder="Wprowadź cenę produktu" Locale="pl-pl" class="form-control" />
    </div>
</div>

<div class="mt-2 float-end">
    <Button Color="ButtonColor.Primary" @onclick="CancelCallback">Anuluj</Button>
    <Button Color="ButtonColor.Success" @onclick="CreateProduct">Utwórz produkt</Button>
</div>

@code {
    [Parameter, EditorRequired] public EventCallback CancelCallback { get; set; }
    [Parameter, EditorRequired] public EventCallback<Product> CreateProductCallback { get; set; }

    private StatusMessageData? _statusMessageData;

    private decimal _newPrice;
    private string _newName = string.Empty;
    private string _newUnit = string.Empty;
    private string _newCategory = string.Empty;

    protected override void OnParametersSet() => ClearInput();

    private Task CreateProduct()
    {
        if (!ValidateProduct())
        {
            return Task.CompletedTask;
        }

        var newProduct = new Product
        {
            Price = _newPrice,
            Name = _newName,
            Unit = _newUnit,
            Category = _newCategory
        };

        return CreateProductCallback.InvokeAsync(newProduct);
    }

    private bool ValidateProduct()
    {
        _statusMessageData = null;

        var invalidProperties = string.IsNullOrEmpty(_newName) || 
                                string.IsNullOrEmpty(_newCategory) || 
                                string.IsNullOrEmpty(_newUnit) ||
                                _newName.Length > 40 ||
                                _newCategory.Length > 20 ||
                                _newUnit.Length > 20 ||
                                _newPrice is <= 0 or >= 10e7m;

        if (invalidProperties)
        {
            _statusMessageData = new StatusMessageData("Niepoprawne dane produktu", StatusMessageType.Error);
            return false;
        }

        return true;
    }

    private void ClearInput()
    {
        _newPrice = 0;
        _newName = string.Empty;
        _newUnit = string.Empty;
        _newCategory = string.Empty;
    }
}
