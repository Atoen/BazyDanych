
@using BazyDanych.Data.Models

<StatusMessage Data="_statusMessageData"/>

<div class="row mb-3 align-items-end">
    <div class="col-md-3">
        <label for="employeeFirstName" class="form-label">Imię</label>
    </div>
    <div class="col-md-9">
        <InputText id="employeeFirstName" @bind-Value="_newFirstName" Placeholder="Wprowadź imię pracownika" class="form-control" />
    </div>
</div>

<div class="row mb-3 align-items-end">
    <div class="col-md-3">
        <label for="employeeSecondName" class="form-label">Drugie imię</label>
    </div>
    <div class="col-md-9">
        <InputText id="employeeSecondName" @bind-Value="_newSecondName" Placeholder="Wprowadź drugie pracownika" 
                   class="form-control" />
    </div>
</div>

<div class="row mb-3 align-items-end">
    <div class="col-md-3">
        <label for="employeeLastName" class="form-label">Nazwisko</label>
    </div>
    <div class="col-md-9">
        <InputText id="employeeLastName" @bind-Value="_newLastName" Placeholder="Wprowadź nazwisko pracownika" class="form-control" />
    </div>
</div>

<div class="row mb-3 align-items-end">
    <div class="col-md-3">
        <label for="employeeLogin" class="form-label">Login</label>
    </div>
    <div class="col-md-9">
        <InputText id="employeeLogin" @bind-Value="_newLogin" Placeholder="Wprowadź login pracownika" class="form-control" />
    </div>
</div>

<div class="row mb-3 align-items-end">
    <div class="col-md-3">
        <label for="employeeSalary" class="form-label">Wynagrodzenie</label>
    </div>
    <div class="col-md-9">
        <CurrencyInput id="employeeSalary" TValue="decimal" @bind-Value="_newSalary" AllowNegativeNumbers="false"
                       MinimumIntegerDigits="1" MinimumFractionDigits="2" MaximumFractionDigits="2"
                       Placeholder="Wprowadź nowe wynagrodzenie pracownika" Locale="pl-pl" class="form-control" />
    </div>
</div>

<div class="mt-2 float-end">
    <Button Color="ButtonColor.Primary" @onclick="CancelCallback">Anuluj</Button>
    <Button Color="ButtonColor.Success" @onclick="ModifyEmployee">Zapisz modyfikacje</Button>
</div>

@code {
    [Parameter, EditorRequired] public EventCallback CancelCallback { get; set; }
    [Parameter, EditorRequired] public EventCallback<EmployeeModel> ModifyEmployeeCallback { get; set; }
    [Parameter, EditorRequired] public EmployeeModel ModifiedEmployee { get; set; } = default!;

    private StatusMessageData? _statusMessageData;
    
    private decimal _newSalary;
    private string _newFirstName = default!;
    private string? _newSecondName;
    private string _newLastName = default!;
    private string _newLogin = default!;
    
    protected override void OnParametersSet()
    {
        _statusMessageData = null;
        
        _newSalary = ModifiedEmployee.Salary;
        _newFirstName = ModifiedEmployee.FirstName;
        _newSecondName = ModifiedEmployee.SecondName;
        _newLastName = ModifiedEmployee.LastName;
        _newLogin = ModifiedEmployee.Login;
    }

    private Task ModifyEmployee()
    {
        if (!ValidateModification())
        {
            return Task.CompletedTask;
        }

        var result = new EmployeeModel(ModifiedEmployee.Id, _newFirstName, _newSecondName, _newLastName, _newLogin,
            _newSalary, ModifiedEmployee.Position);

        return ModifyEmployeeCallback.InvokeAsync(result);
    }
    
    private bool ValidateModification()
    {
        _statusMessageData = null;
        
        var invalidProperties = string.IsNullOrEmpty(_newFirstName) || 
                               string.IsNullOrEmpty(_newLastName) || 
                               string.IsNullOrEmpty(_newLogin) ||
                               _newSalary <= 0;

        var nothingChanged = _newFirstName == ModifiedEmployee.FirstName &&
                             _newSecondName == ModifiedEmployee.SecondName &&
                             _newLastName == ModifiedEmployee.LastName &&
                             _newLogin == ModifiedEmployee.Login &&
                             _newSalary == ModifiedEmployee.Salary;
        
        if (invalidProperties)
        {
            _statusMessageData = new StatusMessageData("Niepoprawne dane pracownika", StatusMessageType.Error);
            return false;
        }

        if (nothingChanged)
        {
            _statusMessageData = new StatusMessageData("Brak wprowadzonych zmian", StatusMessageType.Info);
            return false;
        }
        
        return true;
    }
}
